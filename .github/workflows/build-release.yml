name: Build and Release Aeris Client

on:
  push:
    branches: [ release ]
  pull_request:
    branches: [ release ]

# Add permissions for GitHub token
permissions:
  contents: write
  discussions: write

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build for macOS
      if: matrix.os == 'macos-latest'
      env:
        CI: false
        GITHUB_ACTIONS: false
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASS: ${{ secrets.APPLE_ID_PASS }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      run: npm run build:mac
      
    - name: Build for Windows
      if: matrix.os == 'windows-latest'
      env:
        CI: false
        GITHUB_ACTIONS: false
      run: npm run build:win
      
    - name: Upload macOS artifacts
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: aeris-macos
        path: dist/*.dmg
        retention-days: 30
        
    - name: Upload Windows artifacts
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: aeris-windows
        path: dist/*.exe
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/release' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Get version from package.json
      id: package-version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=v$VERSION" >> $GITHUB_OUTPUT
        echo "Package.json version: $VERSION"
      
    - name: Download macOS artifacts
      uses: actions/download-artifact@v4
      with:
        name: aeris-macos
        path: ./release-assets/
        
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: aeris-windows
        path: ./release-assets/
        
    - name: Display downloaded artifacts
      run: ls -la ./release-assets/
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.package-version.outputs.tag_name }}
        name: Aeris Client ${{ steps.package-version.outputs.version }}
        generate_release_notes: false
        body: |
          ## Aeris ERP Desktop Client ${{ steps.package-version.outputs.version }}
          
          **Version:** ${{ steps.package-version.outputs.version }}
          **Build Date:** ${{ github.event.head_commit.timestamp }}
          **Commit:** ${{ github.sha }}
          
          ### üöÄ Features
          - üñ•Ô∏è Cross-platform desktop application (Windows/macOS)
          - üåê Connects to Aeris ERP server at `10.0.0.140:8000`
          - üñ®Ô∏è Full printing support including network printers
          - üîß Automatic Bootstrap modal focus fix (no ERP changes required)
          - ‚öôÔ∏è Configurable settings and auto-start functionality
          
          ### üì¶ Downloads
          Choose the appropriate file for your platform:
          
          **Windows:**
          - `Aeris Setup ${{ steps.package-version.outputs.version }}.exe` - Windows installer
          
          **macOS:**
          - `Aeris-${{ steps.package-version.outputs.version }}-x64.dmg` - macOS Intel
          - `Aeris-${{ steps.package-version.outputs.version }}-arm64.dmg` - macOS Apple Silicon
          
          > **Note:** Only the installer files (.exe/.dmg) are included in this release. Source code archives are excluded to keep downloads clean and focused.
          
          ### üîß Installation
          1. Download the appropriate file for your platform
          2. **Windows**: Run the installer and follow the wizard
          3. **macOS**: Open the DMG and drag Aeris to Applications folder
          4. Launch Aeris - it will automatically connect to your ERP server
          
          ### ‚ö†Ô∏è Security Note
          On macOS, you may need to right-click the app and select "Open" the first time, or go to System Preferences > Security & Privacy to allow the app to run.
          
          ---
          *Built automatically from release branch*
        draft: false
        prerelease: false
        files: |
          ./release-assets/*
          
    - name: Remove source code archives
      run: |
        # Get the release ID
        RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ steps.package-version.outputs.tag_name }}" | \
          jq -r '.id')
        
        # Get assets and delete source code archives
        curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID/assets" | \
          jq -r '.[] | select(.name | endswith(".zip") or endswith(".tar.gz")) | .id' | \
          while read asset_id; do
            echo "Deleting source archive asset ID: $asset_id"
            curl -X DELETE -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/assets/$asset_id"
          done

  notify:
    needs: [build, release]
    runs-on: ubuntu-latest
    if: always() && github.ref == 'refs/heads/release' && github.event_name == 'push'
    
    steps:
    - name: Notify Success
      if: needs.build.result == 'success' && needs.release.result == 'success'
      run: |
        echo "‚úÖ Release build completed successfully!"
        echo "üì¶ New version released with auto-incremented version number"
        
    - name: Notify Failure
      if: needs.build.result == 'failure' || needs.release.result == 'failure'
      run: |
        echo "‚ùå Release build failed!"
        echo "üîç Check the workflow logs for details"
        exit 1 